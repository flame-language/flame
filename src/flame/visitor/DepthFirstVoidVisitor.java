/* Generated by JTB 1.4.7 */
package flame.visitor;

import flame.syntaxtree.*;
import java.util.*;

public class DepthFirstVoidVisitor implements IVoidVisitor {


  public void visit(final NodeChoice n) {
    n.choice.accept(this);
    return;
  }

  public void visit(final NodeList n) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this);
    }
    return;
  }

  public void visit(final NodeListOptional n) {
    if (n.present()) {
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        e.next().accept(this);
        }
      return;
    } else
      return;
  }

  public void visit(final NodeOptional n) {
    if (n.present()) {
      n.node.accept(this);
      return;
    } else
      return;
  }

  public void visit(final NodeSequence n) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this);
    }
    return;
  }

  public void visit(final NodeTCF n) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  public void visit(final NodeToken n) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  public void visit(final Start n) {
    // f0 -> ( StatementExpression() )*
    n.f0.accept(this);
  }

  public void visit(final Require n) {
    // f0 -> "require"
    n.f0.accept(this);
    // f1 -> ( <IDENTIFIER> )+
    n.f1.accept(this);
  }

  public void visit(final MathExpression n) {
    // f0 -> AdditiveExpression()
    n.f0.accept(this);
  }

  public void visit(final AdditiveExpression n) {
    // f0 -> MultiplicativeExpression()
    n.f0.accept(this);
    // f1 -> ( #0 ( %0 "+"
    // .. .. . .. | %1 "-" )
    // .. .. . #1 MultiplicativeExpression() )*
    n.f1.accept(this);
  }

  public void visit(final MultiplicativeExpression n) {
    // f0 -> UnaryExpression()
    n.f0.accept(this);
    // f1 -> ( #0 ( %0 "*"
    // .. .. . .. | %1 "/"
    // .. .. . .. | %2 "%" )
    // .. .. . #1 UnaryExpression() )*
    n.f1.accept(this);
  }

  public void visit(final UnaryExpression n) {
    // f0 -> . %0 #0 "(" #1 MathExpression() #2 ")"
    // .. .. | %1 <INTEGER_LITERAL>
    // .. .. | %2 VariableName()
    n.f0.accept(this);
  }

  public void visit(final RelationalExprssion n) {
    // f0 -> RelationalEqualityExpression()
    n.f0.accept(this);
  }

  public void visit(final RelationalEqualityExpression n) {
    // f0 -> RelationalGreaterExpression()
    n.f0.accept(this);
    // f1 -> ( #0 ( %0 "=="
    // .. .. . .. | %1 "!=" )
    // .. .. . #1 RelationalGreaterExpression() )*
    n.f1.accept(this);
  }

  public void visit(final RelationalGreaterExpression n) {
    // f0 -> RelationalLessExpression()
    n.f0.accept(this);
    // f1 -> ( #0 ( %0 ">"
    // .. .. . .. | %1 ">=" )
    // .. .. . #1 RelationalLessExpression() )*
    n.f1.accept(this);
  }

  public void visit(final RelationalLessExpression n) {
    // f0 -> UnaryRelational()
    n.f0.accept(this);
    // f1 -> ( #0 ( %0 "<"
    // .. .. . .. | %1 "<=" )
    // .. .. . #1 UnaryRelational() )*
    n.f1.accept(this);
  }

  public void visit(final UnaryRelational n) {
    // f0 -> . %0 <INTEGER_LITERAL>
    // .. .. | %1 VariableName()
    n.f0.accept(this);
  }

  public void visit(final IfExpression n) {
    // f0 -> "if"
    n.f0.accept(this);
    // f1 -> RelationalExprssion()
    n.f1.accept(this);
    // f2 -> "do"
    n.f2.accept(this);
    // f3 -> ( StatementExpression() )*
    n.f3.accept(this);
    // f4 -> "stop"
    n.f4.accept(this);
  }

  public void visit(final WhileExpression n) {
    // f0 -> "while"
    n.f0.accept(this);
    // f1 -> RelationalExprssion()
    n.f1.accept(this);
    // f2 -> "do"
    n.f2.accept(this);
    // f3 -> ( StatementExpression() )*
    n.f3.accept(this);
    // f4 -> "stop"
    n.f4.accept(this);
  }

  public void visit(final VariableDeclaration n) {
    // f0 -> "def"
    n.f0.accept(this);
    // f1 -> VariableName()
    n.f1.accept(this);
    // f2 -> "="
    n.f2.accept(this);
    // f3 -> MathExpression()
    n.f3.accept(this);
    // f4 -> ";"
    n.f4.accept(this);
  }

  public void visit(final VariableAssign n) {
    // f0 -> VariableName()
    n.f0.accept(this);
    // f1 -> "="
    n.f1.accept(this);
    // f2 -> MathExpression()
    n.f2.accept(this);
    // f3 -> ";"
    n.f3.accept(this);
  }

  public void visit(final VariableName n) {
    // f0 -> <IDENTIFIER>
    n.f0.accept(this);
  }

  public void visit(final JavaStaticMethods n) {
    // f0 -> <IDENTIFIER>
    n.f0.accept(this);
    // f1 -> ( #0 ":" #1 <IDENTIFIER> )+
    n.f1.accept(this);
    // f2 -> "("
    n.f2.accept(this);
    // f3 -> MathExpression()
    n.f3.accept(this);
    // f4 -> ( #0 "," #1 MathExpression() )*
    n.f4.accept(this);
    // f5 -> ")"
    n.f5.accept(this);
    // f6 -> ";"
    n.f6.accept(this);
  }

  public void visit(final StatementExpression n) {
    // f0 -> . %0 VariableDeclaration()
    // .. .. | %1 VariableAssign()
    // .. .. | %2 JavaStaticMethods()
    // .. .. | %3 IfExpression()
    // .. .. | %4 WhileExpression()
    n.f0.accept(this);
  }

}
